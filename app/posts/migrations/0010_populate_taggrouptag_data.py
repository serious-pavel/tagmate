# Generated by Django 5.1.11 on 2025-08-19 10:03

from django.db import migrations


def populate_tag_group_through_model(apps, schema_editor):
    """
    Populate TagGroupTag through model with existing TagGroup-Tag relationships
    """
    TagGroup = apps.get_model('posts', 'TagGroup')
    Tag = apps.get_model('posts', 'Tag')
    TagGroupTag = apps.get_model('posts', 'TagGroupTag')

    print("Populating TagGroupTag through model...")

    for tg in TagGroup.objects.all():
        # Get current tags (ordered by name since that was the original ordering)
        current_tags = tg.tags.all().order_by('name')

        # Create TagGroupTag entries with position
        tg_tags_to_create = []
        for position, tag in enumerate(current_tags):
            tg_tags_to_create.append(
                TagGroupTag(
                    tag_group=tg,
                    tag=tag,
                    position=position
                )
            )

        # Bulk create for efficiency
        if tg_tags_to_create:
            TagGroupTag.objects.bulk_create(tg_tags_to_create)

    print(f"Created {TagGroupTag.objects.count()} TagGroupTag relationships")


def reverse_populate_tag_group_through_model(apps, schema_editor):
    """
    Reverse operation: clear all TagGroupTag entries
    """
    TagGroupTag = apps.get_model('posts', 'TagGroupTag')
    TagGroupTag.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('posts', '0009_taggrouptag_taggroup_tags_through'),
    ]

    operations = [
        migrations.RunPython(
            populate_tag_group_through_model,
            reverse_populate_tag_group_through_model
        ),
    ]
